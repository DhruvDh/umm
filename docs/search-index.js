var searchIndex = JSON.parse('{\
"umm":{"doc":"umm","t":[6,5,5,0,0,5,0,0,3,17,17,17,3,3,17,17,3,3,3,17,3,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,11,11,12,12,12,12,12,0,12,12,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,6,3,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11,11,5,11,5,5,5,11,11,11,13,13,3,4,13,3,3,13,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5],"n":["Dict","clean","clean_script","constants","grade","grade","java","util","BUILD_DIR","CLASSNAME_QUERY","IMPORT_QUERY","INTERFACENAME_QUERY","JAVA_TS_LANG","LIB_DIR","MAIN_METHOD_QUERY","PACKAGE_QUERY","ROOT_DIR","SEPARATOR","SOURCE_DIR","TEST_ANNOTATION_QUERY","TEST_DIR","UMM_DIR","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Grade","GradeResult","JavacDiagnostic","MutationDiagnostic","Reason","Requirement","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fields","fields","fields","file_name","from","from","from","grade","grade_by_hidden_tests","grade_by_hidden_tests_script","grade_by_tests","grade_by_tests_script","grade_docs","grade_docs_script","grade_unit_tests","grade_unit_tests_script","headers","headers","headers","into","into","into","is_error","line_number","line_number","message","mutator","parser","path","result","show_result","source_file_name","source_method","test_file_name","test_method","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Input","ParseState","PositionRepr","__parse_diag_type","__parse_diagnostic","__parse_found_tests","__parse_line_number","__parse_mutation_report_row","__parse_mutation_test_examined_none","__parse_mutation_test_examined_path","__parse_mutations_csv_word","__parse_num_tests_found","__parse_num_tests_passed","__parse_number","__parse_parse_diag","__parse_path","__parse_path_separator","__parse_successful_tests","__parse_whitespace","__parse_word","_phantom","borrow","borrow_mut","from","into","mutation_report_row","new","num_tests_found","num_tests_passed","parse_diag","try_from","try_into","type_id","Class","ClassWithMain","File","FileType","Interface","Parser","Project","Test","_parser","_tree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check_script","classpath","clone","clone","clone","clone_into","clone_into","clone_into","code","deserialize","deserialize","deserialize","doc_check","doc_check_script","eq","file_name","file_name","files","files","fmt","fmt","fmt","from","from","from","from","identify","identify_script","imports","info","into","into","into","into","kind","kind","lang","name","names","new","new","new","new_script","new_script","package_name","path","proper_name","query","query","query_script","run","run_script","serialize","serialize","serialize","test","test_methods","test_methods","test_script","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","classpath","download","find_files","java_path","javac_path","sourcepath"],"q":["umm","","","","","","","","umm::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","umm::grade","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","umm::grade::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","umm::java","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","umm::util","","","","",""],"d":["Defined for convenience","Deletes all java compiler artefacts","Macro generated variant of #fn_name that returns …","A module defining a bunch of constant values to be used …","For all things related to grading","Prints the result of grading","For discovering Java projects, analyzing them, and …","Utility functions for convenience","Directory to store compiler artifacts","Tree-sitter query that returns name of the class","Tree-sitter query that returns imports made","Tree-sitter query that returns name of the interface","Reference to treesitter language struct","Directory for libraries, jars","Tree-sitter query to check the existence of a main method.","Tree-sitter query that returns name of the package","Path to project root","Platform specific separator character for javac paths","Directory for source files","Tree-sitter query that returns name of the JUnit <code>@Test</code> …","Directory for test files","Directory for <code>umm</code> artifacts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","<code>Grade</code>: grade received for above Requirement","A struct to store grading results and display them","A struct representing a javac diagnostic message TODO: …","A struct representing a PIT diagnostic message TODO: …","<code>Reason</code>: the reason for penalties applied, if any","<code>Requirement</code>: refers to Requirement ID","","","","","","","","","","","","<code>file_name</code>: name of the file the diagnostic is about","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns grade as u32","Grades using hidden tests. Test file is downloaded, ran, …","Macro generated variant of #fn_name that returns …","Grades by running tests, and reports how many tests pass. …","Macro generated variant of #fn_name that returns …","Grades documentation by using the -Xdoclint javac flag. …","Macro generated variant of #fn_name that returns …","Runs mutation tests using Pitest to grade unit tests …","Macro generated variant of #fn_name that returns …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>is_error</code>: boolean value, is true if error or false if the …","<code>line_number</code>: line number","<code>line_number</code>: source line number where mutation occured","<code>message</code>: the diagnostic message","<code>mutator</code>: name of the mutator in question","includes some useful grammars for parsing …","<code>path</code>: path to the file diagnostic is referring to","<code>result</code>: result of mutation testing","Print grade result","<code>source_file_name</code>: name of the source file","<code>source_method</code>: name of the source method being mutated","<code>test_file_name</code>: name of the test file","<code>test_method</code>: name of the test examined","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","parses one row of mutation report","","parses and returns the number of tests found","parses and returns the number of tests passed","parses the first line of a javac diagnostic message and …","","","","Class","Class with a main method","Struct representing a java file","Types of Java files -","Interface","A struct that wraps a tree-sitter parser object and source …","Struct representing a Java project. Any index <code>i</code> in any …","JUnit test class","the tree-sitter parser object","the parse tree","","","","","","","","","Utility method to check for syntax errors using javac flag.","Macro generated variant of #fn_name that returns …","Classpath","","","","","","","the source code being parsed","","","","Utility method to ask javac for documentation lints using …","Macro generated variant of #fn_name that returns …","","Get a reference to the file’s file name.","name of file.","Get a reference to the project’s files.","Collection of java files in this project","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to identiy the correct file from the project from …","Macro generated variant of #fn_name that returns …","imports made by the java file.","Prints project struct as a json","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get a reference to the file’s kind.","Name of tests methods in this file, colored using terminal …","the tree-sitter java grammar language","name of the file TODO: How does this differ from <code>file_name</code>?","Names of java files in this project.","Returns a new parser object","Creates a new <code>File</code> from <code>path</code>","Initializes a Project, by discovering java files in the …","Macro generated variant of #fn_name that returns …","Macro generated variant of #fn_name that returns …","package the java file belongs to.","path to java file.","colored terminal string representing java file name.","Applies a tree sitter query and returns the result as a …","treesitter query for this file","Macro generated variant of #fn_name that returns …","Utility method to run a java file that has a main method. …","Macro generated variant of #fn_name that returns …","","","","A utility method that takes a list of strings (or types …","Get a reference to the file’s test methods.","Name of tests methods in this file, as understood by JUnit.","Macro generated variant of #fn_name that returns …","","","","","","","","","","","","","","","","Find class, jar files in library path and build directory …","TODO: Add docs","A glob utility function to find paths to files with …","Finds an returns the path to java binary","Finds an returns the path to javac binary","Find java files in source path and root directory to …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,0,0,0,9,9,9,10,11,9,10,11,9,9,9,10,11,10,9,10,11,9,0,0,0,0,0,0,0,0,9,10,11,9,10,11,10,10,11,10,11,0,10,11,0,11,11,11,11,9,9,10,11,9,10,11,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,0,12,0,0,0,12,12,12,13,13,0,0,13,0,0,13,14,14,14,13,15,16,14,13,15,16,15,15,16,13,15,16,13,15,16,14,13,15,16,15,15,13,15,15,16,16,13,15,16,14,13,15,16,16,16,15,16,14,13,15,16,15,15,14,15,16,14,15,16,15,16,15,15,15,14,15,15,15,15,13,15,16,15,15,15,15,13,15,16,14,13,15,16,14,13,15,16,14,13,15,16,0,0,0,0,0,0],"f":[null,[[],["result",6]],[[],["result",6,[["box",3,[["evalaltresult",4]]]]]],null,null,[[["str",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["root_dir",3]],["pathbuf",3]],[[["source_dir",3]],["pathbuf",3]],[[["build_dir",3]],["pathbuf",3]],[[["test_dir",3]],["pathbuf",3]],[[["lib_dir",3]],["pathbuf",3]],[[["umm_dir",3]],["pathbuf",3]],[[["separator",3]],["str",0]],[[["java_ts_lang",3]],["language",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["graderesult",3]],["graderesult",3]],[[["",0],["",0]]],[[["graderesult",3]],["vec",3,[["string",3]]]],[[["javacdiagnostic",3]],["vec",3,[["string",3]]]],[[["mutationdiagnostic",3]],["vec",3,[["string",3]]]],null,[[]],[[]],[[]],[[["graderesult",3]],["result",6]],[[["str",0],["str",0],["f64",0],["str",0]],["result",6,[["graderesult",3]]]],[[["str",0],["str",0],["f64",0],["str",0]],["result",6,[["graderesult",3],["box",3,[["evalaltresult",4]]]]]],[[["array",6],["array",6],["project",3],["f64",0],["str",0]],["result",6,[["graderesult",3]]]],[[["array",6],["array",6],["project",3],["f64",0],["str",0]],["result",6,[["graderesult",3],["box",3,[["evalaltresult",4]]]]]],[[["array",6],["project",3],["i64",0],["str",0]],["result",6,[["graderesult",3]]]],[[["array",6],["project",3],["i64",0],["str",0]],["result",6,[["graderesult",3],["box",3,[["evalaltresult",4]]]]]],[[["str",0],["f64",0],["array",6],["array",6],["array",6],["array",6]],["result",6,[["graderesult",3]]]],[[["str",0],["f64",0],["array",6],["array",6],["array",6],["array",6]],["result",6,[["graderesult",3],["box",3,[["evalaltresult",4]]]]]],[[],["vec",3,[["string",3]]]],[[],["vec",3,[["string",3]]]],[[],["vec",3,[["string",3]]]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["array",6]]],null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["bool",0]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["string",3]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["u32",0]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["mutationdiagnostic",3]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["str",0]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["vec",3,[["string",3]]]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["string",3]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["u32",0]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["u32",0]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["u32",0]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["javacdiagnostic",3]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["string",3]]]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4]],[[["str",0],["parsestate",3],["errorstate",3],["usize",0]],["ruleresult",4,[["string",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["str",0]],["result",4,[["mutationdiagnostic",3],["parseerror",3]]]],[[],["parsestate",3]],[[["str",0]],["result",4,[["u32",0],["parseerror",3]]]],[[["str",0]],["result",4,[["u32",0],["parseerror",3]]]],[[["str",0]],["result",4,[["javacdiagnostic",3],["parseerror",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["file",3]],["result",6]],[[["file",3]],["result",6,[["box",3,[["evalaltresult",4]]]]]],null,[[["filetype",4]],["filetype",4]],[[["file",3]],["file",3]],[[["project",3]],["project",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["result",4,[["filetype",4]]]],[[],["result",4,[["file",3]]]],[[],["result",4,[["project",3]]]],[[["file",3]],["result",6,[["string",3]]]],[[["file",3]],["result",6,[["string",3],["box",3,[["evalaltresult",4]]]]]],[[["filetype",4],["filetype",4]],["bool",0]],[[["file",3]],["str",0]],null,[[["project",3]]],null,[[["filetype",4],["formatter",3]],["result",6]],[[["file",3],["formatter",3]],["result",6]],[[["project",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["project",3],["str",0]],["result",6,[["file",3]]]],[[["project",3],["str",0]],["result",6,[["file",3],["box",3,[["evalaltresult",4]]]]]],null,[[["project",3]],["result",6]],[[]],[[]],[[]],[[]],[[["file",3]],["filetype",4]],null,null,null,null,[[["string",3],["language",3]],["result",6,[["parser",3]]]],[[["pathbuf",3]],["result",6,[["file",3]]]],[[],["result",6,[["project",3]]]],[[["pathbuf",3]],["result",6,[["file",3],["box",3,[["evalaltresult",4]]]]]],[[],["result",6,[["project",3],["box",3,[["evalaltresult",4]]]]]],null,null,null,[[["parser",3],["str",0]],["result",6,[["vec",3,[["hashmap",3,[["string",3],["string",3]]]]]]]],[[["file",3],["str",0]],["result",6,[["vec",3,[["hashmap",3,[["string",3],["string",3]]]]]]]],[[["file",3],["str",0]],["result",6,[["vec",3,[["hashmap",3,[["string",3],["string",3]]]]],["box",3,[["evalaltresult",4]]]]]],[[["file",3]],["result",6]],[[["file",3]],["result",6,[["box",3,[["evalaltresult",4]]]]]],[[["filetype",4]],["result",4]],[[["file",3]],["result",4]],[[["project",3]],["result",4]],[[["file",3],["vec",3,[["str",0]]]],["result",6,[["string",3]]]],[[["file",3]],["vec",3,[["string",3]]]],null,[[["file",3],["vec",3,[["str",0]]]],["result",6,[["string",3],["box",3,[["evalaltresult",4]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",6,[["string",3]]]],[[["str",0],["pathbuf",3],["bool",0]],["result",6]],[[["str",0],["i8",0],["path",3]],["result",6,[["vec",3,[["pathbuf",3]]]]]],[[],["result",6,[["osstring",3]]]],[[],["result",6,[["osstring",3]]]],[[],["result",6,[["string",3]]]]],"p":[[3,"ROOT_DIR"],[3,"SOURCE_DIR"],[3,"BUILD_DIR"],[3,"TEST_DIR"],[3,"LIB_DIR"],[3,"UMM_DIR"],[3,"SEPARATOR"],[3,"JAVA_TS_LANG"],[3,"GradeResult"],[3,"JavacDiagnostic"],[3,"MutationDiagnostic"],[3,"ParseState"],[4,"FileType"],[3,"Parser"],[3,"File"],[3,"Project"]]},\
"umm_derive":{"doc":"umm_derive","t":[23],"n":["generate_rhai_variant"],"q":["umm_derive"],"d":["Generates a version of a fallible function (that uses …"],"i":[0],"f":[null],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
